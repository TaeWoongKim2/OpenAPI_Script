** 445p

<!-- io.springfox setup -->
<dependency>
  <groupId>io.springfox</groupId>
  <artifactId>springfox-boot-starter</artifactId>
  <version>3.0.0</version>
  <exclusions>
     <exclusion>
        <groupId>io.swagger</groupId>
        <artifactId>swagger-annotations</artifactId>
     </exclusion>
     <exclusion>
         <groupId>io.swagger</groupId>
         <artifactId>swagger-models</artifactId>
     </exclusion>
  </exclusions>
</dependency>

<dependency>
  <groupId>io.swagger</groupId>
  <artifactId>swagger-annotations</artifactId>
  <version>1.5.21</version>
</dependency>
<dependency>
  <groupId>io.swagger</groupId>
  <artifactId>swagger-models</artifactId>
  <version>1.5.21</version>
</dependency> 


** 446p

@Configuration
@EnableSwagger2WebMvc
public class SwaggerConfig {                                    
    @Bean
    public Docket api() { 
        return new Docket(DocumentationType.SWAGGER_2)  
          .select()                                  
          .apis(RequestHandlerSelectors.any())              
          .paths(PathSelectors.any())                          
          .build()
          .apiInfo(apiInfo());                                           
    }

   private ApiInfo apiInfo() {
        return new ApiInfo(
          "연락처 서비스 ", 
          "RESTful Service 학습을 위해 만든 서비스 API 입니다.", 
          "v1.0", 
          "Terms of service", 
          new Contact("원형섭", "http://opensg.net", "stepanowon@opensg.net"), 
          "MIT License", "http://opensg.net/license.html", Collections.emptyList());
   }
}



**448p
@Configuration
public class WebConfig implements WebMvcConfigurer {
    ......(생략)
   @Override
   public void addResourceHandlers(ResourceHandlerRegistry registry) {
       registry.addResourceHandler("/swagger-ui/**")
         .addResourceLocations("classpath:/META-INF/resources/webjars/springfox-swagger-ui/")
         .resourceChain(false);
   }
}




** 449p


@RestController
@RequestMapping(value="contacts")
@Api(value="ContactList Service Controller, 연락처 RESTful 서비스")
public class ContactRestController {
  @Autowired
  private ContactService contactService;
  ......
  @ApiOperation(value="연락처 수정", notes="기존 연락처를 수정합니다. ......")
  @PutMapping("{no}")
  public Result updateContact(
      @ApiParam(value="연락처의 일련번호") @PathVariable("no") long no, 
      @ApiParam(value="수정할 연락처 정보") @RequestBody Contact contact) {
    contact.setNo(no);
    return contactService.updateContact(contact);
  }

}



**450p

@ApiOperation(value="연락처 목록 조회", notes="연락처 목록 조회용 리소스입니다...(생략)...")
@ApiImplicitParams({
    @ApiImplicitParam(name="pageno", value="페이지 번호", dataType="string", paramType= query", defaultValue="0"), 
    @ApiImplicitParam(name="pagesize", value="페이지 사이즈", dataType="string", paramType="query", defaultValue="3") 
})
@GetMapping()
public ContactList getContactList(
    @RequestParam(value="pageno", required=false, defaultValue="0") int pageNo, 
    @RequestParam(value="pagesize", required=false, defaultValue="3") int pageSize) {
  ContactList contactList = null;
  if (pageNo < 1) {
    contactList = contactService.getContactList();
  } else {
    if (pageSize < 2) pageSize = 5;
    contactList = contactService.getContactList(pageNo, pageSize);
  }
  return contactList;
}


**451p

@ApiModel(value="연락처 한 건 객체")
@JacksonXmlRootElement(localName = "contact")
public class Contact {
  @JacksonXmlProperty(isAttribute = true)
  @ApiModelProperty(value="일련번호", example="1004")
  private long no;
  @ApiModelProperty(value="이름", example="홍길동")
  private String name;
  @ApiModelProperty(value="전화번호", example="010-2222-3331")
  private String tel;
  @ApiModelProperty(value="주소", example="서울시")
  private String address;

  ...(생략)...
}



**460p

<dependencies>
  ......(생략)
   <!-- io.springfox setup -->
   <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-boot-starter</artifactId>
      <version>3.0.0</version>
      <exclusions>
         <exclusion>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
         </exclusion>
         <exclusion>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-models</artifactId>
         </exclusion>
      </exclusions>
   </dependency>
   <dependency>
      <groupId>io.swagger</groupId>
      <artifactId>swagger-annotations</artifactId>
      <version>1.5.21</version>
   </dependency>
   <dependency>
      <groupId>io.swagger</groupId>
      <artifactId>swagger-models</artifactId>
      <version>1.5.21</version>
   </dependency> 
 ......
</dependencies>




** 461p

package com.multi.oauth20server;
......
@Configuration
@EnableWebSecurity
public class OAuth2SecurityConfig extends WebSecurityConfigurerAdapter {
  @Override
  public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers(
                "/v2/api-docs", "/swagger-resources/**",
                "/swagger-ui.html", "/webjars/**", "/swagger/**");
  }
}



**462p

package com.multi.oauth20server;
......
@Configuration
public class SwaggerConfig {
	private ApiInfo apiInfo() {
		return new ApiInfo("테스트용 리소스 서버 ", "OAuth2 인증 적용이 된 리소스 서버입니다.", "v1.0", "Terms of service",
				new Contact("", "http://opensg.net", "stepanowon@opensg.net"), "MIT License",
				"http://opensg.net/license.html", Collections.emptyList());
	}

	@Bean
	public Docket api() {
		return new Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors.any())
				.paths(PathSelectors.any()).build().apiInfo(apiInfo())
				.securityContexts(Collections.singletonList(securityContext()))
				.securitySchemes(Arrays.asList(securitySchema()));
	}

	private SecurityContext securityContext() {
		return SecurityContext.builder().securityReferences(defaultAuth()).build();
	}

	private List<SecurityReference> defaultAuth() {
		final AuthorizationScope[] authorizationScopes = new AuthorizationScope[] {
				new AuthorizationScope("contacts", "연락처 접근"), new AuthorizationScope("messages", "메시지 접근"),
				new AuthorizationScope("profiles", "프로필 접근") };
		return Collections.singletonList(new SecurityReference("oauth2", authorizationScopes));
	}

	private OAuth securitySchema() {
		final List<AuthorizationScope> authorizationScopeList = new ArrayList<>(2);

		authorizationScopeList.add(new AuthorizationScope("contacts", "연락처 접근"));
		authorizationScopeList.add(new AuthorizationScope("messages", "메시지 접근"));
		authorizationScopeList.add(new AuthorizationScope("profiles", "프로필 접근"));
		
		String tokenUri = "http://tfactory.com/oauth/token";
		String authorizeUri = "http://tfactory.com/oauth/authorize";
		
		final List<GrantType> grantTypes = new ArrayList<>(1);
		grantTypes.add(new ResourceOwnerPasswordCredentialsGrant(tokenUri));
		grantTypes.add(new ImplicitGrant(new LoginEndpoint(authorizeUri), "ImplicitGrantToken"));
		
		return new OAuth("oauth2", authorizationScopeList, grantTypes);
	}
}


**464p 
인증서버에 등록된 Client 앱의 redirect_uri에 다음 경로 추가
- http://server:8000/swagger-ui/oauth2-redirect.html










