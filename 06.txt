** 287 page

DROP TABLE tbl_apiKey;

create table tbl_apikey 
(
 apiKey varchar2(200) NOT NULL,
 hostName varchar2(200) NOT NULL, 
 count number default 0,
 regdate date default sysdate,
 updateDate date default sysdate
);

alter table tbl_apikey add constraint pk_apikey  primary key (apiKey);



** 291 page

public String requestNewAPIKey(ApiKeyVO apiKeyVO) throws Exception {

  String apiKey = DigestUtils.md5DigestAsHex(UUID.randomUUID().toString().getBytes());    
  System.out.println("## hostName : " + apiKeyVO);
  System.out.println("## keyValue: " + apiKey);
  apiKeyVO.setApiKey(apiKey);
  try {
    repository.create(apiKeyVO);
  } catch (Exception e) {
    throw new ApiKeyException("SAME KEY IS ALREADY EXIST.");
  }
  return apiKey;
}



** 292 page

public void checkApiKey(String hostname, String apiKey) throws ApiKeyException {
  ApiKeyVO vo = repository.read(apiKey);
  if (vo == null) {
    throw new ApiKeyException("OPEN API KEY IS UNREGISTED ");
  }
  if (hostname == null || hostname.equals(vo.getHostName()) == false) {
    throw new ApiKeyException("HOSTNAME IS NOT VALID!!");
  }
  if (vo.getCount() >= maxCount) {
    throw new ApiKeyException("EXCESSIVE NUMBER OF REQUEST");
  }
  repository.update(apiKey);		//사용 카운트 1증가
}



** 294 page

package com.multi.contactsapp;
......
@CrossOrigin(origins="*")
@RestController
@RequestMapping(value="contacts")
public class ContactRestController {
  @Autowired
  private ContactService contactService;
 
  @GetMapping()
  public ContactList getContactList() {
    return contactService.getContactList();
  }
}




** 295 page

package com.multi.contactsapp.openapi;
......
@Component
public class ApiKeyInterceptor 
    extends HandlerInterceptorAdapter {

  @Autowired()
  private ApiKeyProcessor keyService;
  
  @Override
  public boolean preHandle(
     HttpServletRequest request, 
     HttpServletResponse response, Object handler)
        throws Exception {
      String origin = (String)request.getHeader("Origin");
      String apiKey = request.getParameter("key");
      keyService.checkApiKey(origin, apiKey);
      return true;
  }
}


package com.multi.contactsapp;
......
@Configuration
public class WebMvcConfig implements WebMvcConfigurer {
  @Autowired
  ApiKeyInterceptor inteceptor; 
  
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(inteceptor)
                .addPathPatterns("/contacts");
    }
}



** 296 page

package com.multi.contactsapp.util;
......

@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

  @ExceptionHandler(value={ ApiKeyException.class })
  @ResponseBody
  public ResponseEntity<ApiErrorInfo> handleApiKeyException(ApiKeyException e) {
    ApiErrorInfo error = new ApiErrorInfo("API Key 처리 오류 : " + e.getMessage(), e.getStatus());
    ResponseEntity<ApiErrorInfo> entity = 
        new ResponseEntity<ApiErrorInfo>(error, HttpStatus.UNAUTHORIZED);
    return entity;
  }
  
  @ExceptionHandler(value={ Exception.class })
  @ResponseBody
  public ResponseEntity<ApiErrorInfo> handleCustomException(Exception e) {
    ApiErrorInfo error = new ApiErrorInfo("서버측 처리 오류 : " + e.getMessage(), "E100");
    ResponseEntity<ApiErrorInfo> entity = 
        new ResponseEntity<ApiErrorInfo>(error, HttpStatus.INTERNAL_SERVER_ERROR);
    return entity;
  }
}

--------------------------------------------

<<ApiErrorInfo.java>>
package com.multi.contactsapp.util;
......
@JacksonXmlRootElement(localName="restApiError")
public class ApiErrorInfo {
  private String message;
  private String status;
  
  //생성자와 Getter,Setter 생략
}




** 300 page

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>API KEY Client</title>
<script src="https://code.jquery.com/jquery.js"></script>
<script type="text/javascript">
$(function() {
  $("#getContacts").click(function() {
    var param = { key : "0da9445a3fa3416582cde24145b7fb93" };
    $("#list").empty();
    $.get("http://tfactory.com:8080/contacts", param)
    .done(function(data) {
      if (data.contacts != null) {
        var str = "";
        for (var i=0; i < data.contacts.length; i++) {
          var c = data.contacts[i];
          str+= `<div>${c.no}: ${c.name}, ${c.tel}, ${c.address}</div>`;
        }
        $("#list").append(str);
      } else {
        $("#list").append(JSON.stringify(data));
      }
    })
    .fail(function(error) {
      console.log(error);
    })
  })
})
</script>
</head>
<body>
  <div>
    <button id="getContacts">연락처 조회하기</button>
    <div id="list"></div>
  </div>
</body>
</html>















