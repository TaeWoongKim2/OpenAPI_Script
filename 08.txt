**405p

<%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%>
<%@ page import="com.opensg.oauth2.client.*" %>
<%@ page import="java.util.*" %>
<%
  HashMap<String,String> map = new HashMap<String, String>();
  map.put("client_id", Settings.CLIENT_ID);
  map.put("redirect_uri", Settings.REDIRECT_URI);
  map.put("response_type", "code");
  String url = Settings.AUTHORIZE_URL + "?" + 
      OAuth2ClientUtil.getParamStringFromMap(map);
%> 
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=EUC-KR">
<title>bitly Oauth 2.0 client Test</title>
</head>
<body>
  <a href="<%=url%>">bitly 앱 승인 페이지로 이동</a>
  <br /><br /><br />
  <p>반드시 http://jcornor.com:8080/bitlyclient 로 실행하세요.</p>
</body>
</html>



**407p

<%@ page language="java" contentType="text/html; charset=utf-8"
    pageEncoding="utf-8"%>
<%@ page import="com.opensg.oauth2.client.*" %>
<%@ page import="java.util.*" %>
<%@ page import="org.apache.commons.httpclient.*" %>
<%@ page import="org.apache.commons.httpclient.methods.*"%>
<%
  String queryString = request.getQueryString();
  HashMap<String,String> map = OAuth2ClientUtil.getMapFromParamString(queryString);
  //code는 이전 행에서 이미 획득 : callback.jsp?code=xxxxxx
  String url = Settings.ACCES_TOKEN_URL;
  HttpClient client = new HttpClient();
  client.getParams().setContentCharset("utf-8");
  PostMethod method = new PostMethod(url);
  method.addParameter("client_id", Settings.CLIENT_ID);
  method.addParameter("client_secret", Settings.CLIENT_SECRET);
  method.addParameter("redirect_uri", Settings.REDIRECT_URI);
  method.addParameter("grant_type", "authorization_code");
  method.addParameter("code", map.get("code"));
  int status = client.executeMethod(method);
  String result= "";
  String body="";
  if (status == 200) {
    body = method.getResponseBodyAsString();
    HashMap<String,String> tokenMap = OAuth2ClientUtil.getMapFromParamString(body);
    session.setAttribute("access_token", tokenMap.get("access_token"));
    response.sendRedirect("main.jsp");
  } else {
    result = "인증 실패!!";
  }
%>
<%=result %>


**409p : main.jsp

<%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%>
<% if (session.getAttribute("access_token") == null) { 
  response.sendRedirect("index.jsp");   
}  %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=EUC-KR">
<link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Quicksand" />
<link rel="stylesheet" type="text/css" href="css/pretty-json.css" />
<title>URL 단축 테스트</title>
</head>
<body>
  긴 URL : <input type="text" id="long" value="" /><br />
  <button id="shorten">URL 짧게!!</button>
  <hr />
  짧은 URL : <span id="short"></span><br />
  수신 데이터 : <br />
 <div style="border: solid 1px gray;" id="json">
  </div>
    <script type="text/javascript" src="js/jquery.min.js" ></script>
    <script type="text/javascript" src="js/underscore-min.js" ></script>
    <script type="text/javascript" src="js/backbone-min.js" ></script>
    <script type="text/javascript" src="js/pretty-json-min.js" ></script>
  <script type="text/javascript">
  var param = { longUrl : ""  };
  $("#shorten").click(function() {
    param.long_url = $("#long").val();
    $.get("shorten.jsp", param, function(response) {
       var node = new PrettyJSON.view.Node({ 
          el:$("#json"), 
          data: response
       });
       console.log(response);
       $("#short").html(response.link);
    });    
  })
  </script>
</body>
</html>



**411p : shorten.jsp

<%@ page language="java" contentType="application/json; charset=utf-8"
    pageEncoding="utf-8"%>
<%@ page import="com.opensg.oauth2.client.*" %>
<%@ page import="java.util.*" %>
<%@ page import="org.apache.commons.httpclient.*" %>
<%@ page import="org.apache.commons.httpclient.methods.*"%>
<%
  if (session.getAttribute("access_token") == null) {
    throw new Exception("access_token is null!!");  
  }

  String access_token = (String)session.getAttribute("access_token");
  
  String jsonRequest = "{ \"long_url\" : \""+ request.getParameter("long_url") + "\" } ";
    StringRequestEntity requestEntity = 
            new StringRequestEntity(jsonRequest, "application/json", "UTF-8");
      
  String bearerToken = OAuth2ClientUtil.generateBearerTokenHeaderString(access_token);
  String endpoint = Settings.SHORTEN_API_URL;
  HttpClient client = new HttpClient();
  client.getParams().setContentCharset("utf-8");
  
  PostMethod method = new PostMethod(endpoint);
  method.setRequestEntity(requestEntity);
  method.setRequestHeader("Authorization", bearerToken);
  method.setRequestHeader("Content-type", "application/json");
  method.setRequestHeader("Accept", "application/json");
  
  int status = client.executeMethod(method);
  String result= "";
  if (status >= 200 || status < 300) {
    result = method.getResponseBodyAsString();
  } else {
    result = "{ \"status\" : \"오류 발생 : " + status + "\" }";
  }  
%>
<%=result %>



**419p

#data source settings
spring.datasource.url=jdbc:h2:tcp://localhost/~/test
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

#JPA settings
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#server settings
server.port=80


<< ddl.sql.txt >>
drop table contact;
    
create table contact (
  no bigint generated by default as identity,
  address varchar(255),
  name varchar(255),
  tel varchar(255),
  primary key (no)
);

INSERT INTO contact (name, address, tel) VALUES ('쯔위', '서울', '010-2121-1211');
INSERT INTO contact (name, address, tel) VALUES ('다연', '경기', '010-2121-1212');
INSERT INTO contact (name, address, tel) VALUES ('정연', '서울', '010-2121-1213');
INSERT INTO contact (name, address, tel) VALUES ('주이', '경기', '010-2121-1214');
INSERT INTO contact (name, address, tel) VALUES ('사나', '전북', '010-2121-1215');
INSERT INTO contact (name, address, tel) VALUES ('모모', '경남', '010-2121-1216');
INSERT INTO contact (name, address, tel) VALUES ('태연', '경북', '010-2121-1217');
INSERT INTO contact (name, address, tel) VALUES ('수영', '광주', '010-2121-1218');
INSERT INTO contact (name, address, tel) VALUES ('혜영', '대구', '010-2121-1219');
INSERT INTO contact (name, address, tel) VALUES ('소희', '강원', '010-2121-1220');
INSERT INTO contact (name, address, tel) VALUES ('주니', '강원', '010-2121-1221');   





**420p

package com.multi.oauth20server.domain;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Contact {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long no;
	private String name;
	private String tel;
	private String address;

	public Contact() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Contact(long no, String name, String tel, String address) {
		super();
		this.no = no;
		this.name = name;
		this.tel = tel;
		this.address = address;
	}

	public long getNo() {
		return no;
	}

	public void setNo(long no) {
		this.no = no;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getTel() {
		return tel;
	}

	public void setTel(String tel) {
		this.tel = tel;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

}




**421p 

package com.multi.oauth20server.dao;

import org.springframework.data.jpa.repository.JpaRepository;
import com.multi.oauth20server.domain.Contact;

public interface ContactRepository extends JpaRepository<Contact, Long>{
}


**422p 

package com.multi.oauth20server;
......
@RestController
@RequestMapping(value="/api")
public class ContactRestController {  
  @Autowired
  ContactRepository contactRepository;

  @GetMapping(value="/contacts", produces = {"application/json"})
  public List<Contact> getContactList() {
    return contactRepository.findAll();
  }
  
  @GetMapping(value="/profiles", produces = {"application/json"})
  public HashMap<String, String> getProfile() {
    HashMap<String,String> profile = new HashMap<String, String>();
    profile.put("system", "Test Auth Server");
    profile.put("devenv", "Spring Boot 2.x");
    return profile;
  }
}



**424p

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-security</artifactId>
</dependency>
<dependency>
	<groupId>org.springframework.security.oauth.boot</groupId>
	<artifactId>spring-security-oauth2-autoconfigure</artifactId>
	<version>2.2.5.RELEASE</version>
</dependency>


**425p

  @Bean
  public BCryptPasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
  }

----------------

-- used in tests that use HSQL
create table oauth_client_details (
  client_id VARCHAR(256) PRIMARY KEY,
  resource_ids VARCHAR(256),
  client_secret VARCHAR(256),
  scope VARCHAR(256),
  authorized_grant_types VARCHAR(256),
  web_server_redirect_uri VARCHAR(256),
  authorities VARCHAR(256),
  access_token_validity INTEGER,
  refresh_token_validity INTEGER,
  additional_information VARCHAR(4096),
  autoapprove VARCHAR(256)
);

create table oauth_client_token (
  token_id VARCHAR(256),
  token LONGVARBINARY,
  authentication_id VARCHAR(256) PRIMARY KEY,
  user_name VARCHAR(256),
  client_id VARCHAR(256)
);

create table oauth_access_token (
  token_id VARCHAR(256),
  token LONGVARBINARY,
  authentication_id VARCHAR(256) PRIMARY KEY,
  user_name VARCHAR(256),
  client_id VARCHAR(256),
  authentication LONGVARBINARY,
  refresh_token VARCHAR(256)
);

create table oauth_refresh_token (
  token_id VARCHAR(256),
  token LONGVARBINARY,
  authentication LONGVARBINARY
);

create table oauth_code (
  code VARCHAR(256), authentication LONGVARBINARY
);

create table oauth_approvals (
	userId VARCHAR(256),
	clientId VARCHAR(256),
	scope VARCHAR(256),
	status VARCHAR(10),
	expiresAt TIMESTAMP,
	lastModifiedAt TIMESTAMP
);


-- customized oauth_client_details table
create table ClientDetails (
  appId VARCHAR(256) PRIMARY KEY,
  resourceIds VARCHAR(256),
  appSecret VARCHAR(256),
  scope VARCHAR(256),
  grantTypes VARCHAR(256),
  redirectUrl VARCHAR(256),
  authorities VARCHAR(256),
  access_token_validity INTEGER,
  refresh_token_validity INTEGER,
  additionalInformation VARCHAR(4096),
  autoApproveScopes VARCHAR(256)
);






**426p

package com.multi.oauth20server;
......
@Configuration
@EnableWebSecurity
public class OAuth2SecurityConfig extends WebSecurityConfigurerAdapter {
  @Autowired
  BCryptPasswordEncoder passwordEncoder;

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
            .antMatchers("/oauth/**", "/oauth/token", "/login**").permitAll()
            .anyRequest().authenticated();
        http.formLogin();
  }

  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth.inMemoryAuthentication()
      .withUser("root").password(passwordEncoder.encode("1234")).roles("admins", "users")
      .and().withUser("user1").password(passwordEncoder.encode("1234")).roles("users")
      .and().withUser("user2").password(passwordEncoder.encode("1234")).roles("users");
  }
}




**427p

@Configuration
@EnableAuthorizationServer
public class OAuth2AuthServerConfig extends AuthorizationServerConfigurerAdapter {
  @Autowired
  DataSource dataSource;
  @Autowired
  BCryptPasswordEncoder passwordEncoder;

  public TokenStore tokenStore() {
    return new JdbcTokenStore(dataSource);
  }

  public ApprovalStore approvalStore() {
    return new InMemoryApprovalStore();
  }
    
  public AuthorizationCodeServices authorizationCodeServices() {
    return new InMemoryAuthorizationCodeServices();
  }

 @Override
  public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
    endpoints
      .tokenStore(tokenStore())
      .approvalStore(approvalStore())
      .authorizationCodeServices(authorizationCodeServices());
  }
  @Override
    public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {
        oauthServer.tokenKeyAccess("permitAll()")
            .checkTokenAccess("isAuthenticated()")
            .allowFormAuthenticationForClients();
    }
    @Override
    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
        clients.inMemory().withClient("client1").secret(passwordEncoder.encode("1234"))
            .authorizedGrantTypes("authorization_code","implicit","password",
                 "client_credentials", "refresh_token")
            .scopes("contacts", "profiles", "messages").authorities("TEST_CLIENT")
            .redirectUris("http://jcornor.com:8080/callback", "http://localhost:8080/callback")
            .accessTokenValiditySeconds(3600)
            .refreshTokenValiditySeconds(0);
    }   
}


**429p

@EnableResourceServer
@Configuration
public class OAuth2ResourceServerConfig extends ResourceServerConfigurerAdapter {
  @Autowired
  DataSource dataSource;
  
  public TokenStore tokenStore() {
    return new JdbcTokenStore(dataSource);
  }
  @Override
  public void configure(HttpSecurity http) throws Exception { 
      http.csrf().disable()
         .requestMatchers()
             .antMatchers("/api/**")
         .and().authorizeRequests()
             .antMatchers("/api/contacts").access("#oauth2.hasScope('contacts')")
             .antMatchers("/api/profiles").access("#oauth2.hasScope('profiles')")
         .and().exceptionHandling()
             .accessDeniedHandler(new OAuth2AccessDeniedHandler());
  } 
}


**430p
<<implicit grant>>
http://tfactory.com/oauth/authorize?response_type=token&client_id=client1&scope=contacts%20messages&redirect_uri=http://jcornor.com:8080/callback


<<AUthorization code grant>>
http://tfactory.com/oauth/authorize?response_type=code&client_id=client1&scope=contacts%20messages&redirect_uri=http://jcornor.com:8080/callback


**433p

<dependency>	
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-jwt</artifactId>
    <version>1.1.0.RELEASE</version>
</dependency>


**434p

  public JwtAccessTokenConverter accessTokenConverter() {
    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    converter.setSigningKey("SECRET KEY");
    return converter;
  }

  public TokenStore tokenStore() {
    return new JwtTokenStore(accessTokenConverter());
  }

  @Override
  public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
    endpoints
      .tokenStore(tokenStore()).accessTokenConverter(accessTokenConverter())
      .approvalStore(approvalStore())
      .authorizationCodeServices(authorizationCodeServices());
  }



**435p

  public TokenStore tokenStore() {
    return new JwtTokenStore(accessTokenConverter());
  }
  @Bean
  public JwtAccessTokenConverter accessTokenConverter() {
    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    converter.setSigningKey("SECRET KEY");
    return converter;
  }
  @Bean
  public DefaultTokenServices tokenServices() {
    DefaultTokenServices defaultTokenServices = new DefaultTokenServices();
    defaultTokenServices.setTokenStore(tokenStore());
    return defaultTokenServices;
  }
  @Override
  public void configure(ResourceServerSecurityConfigurer config) {
    config.tokenServices(tokenServices());
  }


** 436p
<<테스트>>
- implicit grant
http://tfactory.com/oauth/authorize?response_type=token&client_id=client1&scope=contacts%20messages&redirect_uri=http://jcornor.com:8080/callback


- AUthorization code grant
http://tfactory.com/oauth/authorize?response_type=code&client_id=client1&scope=contacts%20messages&redirect_uri=http://jcornor.com:8080/callback

















